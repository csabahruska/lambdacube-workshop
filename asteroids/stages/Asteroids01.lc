
-- 'vertexpos':
-- 'uvw': Texture coordinates
vertexPositionAndTexture :: Vec 4 Float -> Vec 3 Float -> (Vec 4 Float, Vec 2 Float)
vertexPositionAndTexture vertexpos uvw =
    ( cameraTransform vertexpos
    , V2 uvw%x (1 - uvw%y)
    )

cameraTransform v = perspective 0.1 100 45 1 *. lookat (V3 0 0 5) (V3 0 0 0) (V3 0 1 0) *. v

makeFrame (time :: Float)
          (color :: Vec 4 Float)
          (texture :: Texture)
          (prims :: PrimitiveStream Triangle (Vec 4 Float, Vec 3 Float, Vec 3 Float))

    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 1 1 1 1))
  `overlay`
      prims
    & mapPrimitives (\(vertexpos,_n,uvw) -> vertexPositionAndTexture vertexpos uvw)
    & rasterizePrimitives (TriangleCtx CullBack PolygonFill NoOffset LastVertex) ((Smooth))
    & mapFragments (\((uv)) -> ((color * texture2D (Sampler PointFilter MirroredRepeat texture) uv )))
    & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))

main = renderFrame $
   makeFrame (Uniform "time")
             (Uniform "diffuseColor")
             (Texture2DSlot "diffuseTexture")
             (fetch "objects" (Attribute "position", Attribute "normal", Attribute "uvw"))
