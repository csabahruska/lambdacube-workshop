diff --git a/lambdacube-workshop/asteroids/Asteroids.hs b/lambdacube-workshop/asteroids/Asteroids.hs
index 9284c09..7cacde1 100644
--- a/lambdacube-workshop/asteroids/Asteroids.hs
+++ b/lambdacube-workshop/asteroids/Asteroids.hs
@@ -8,6 +8,7 @@ import Graphics.UI.GLFW as GLFW
 
 import LambdaCube.Compiler as LambdaCube -- compiler
 import LambdaCube.GL as LambdaCubeGL -- renderer
+import qualified LambdaCube.OBJ as OBJ
 
 asteroidsModificationTime = getModificationTime "Asteroids.lc"
 
@@ -29,6 +30,17 @@ main = do
 
     storage <- LambdaCubeGL.allocStorage inputSchema
 
+    -- load OBJ geometry and material descriptions
+    let loadObj fname = OBJ.loadOBJToGPU fname >>= \case
+          Left err -> fail err
+          Right a -> return a
+    (asteroidMesh,asteroidMtl) <- loadObj "data/asteroid.obj"
+
+    -- load materials textures
+    gpuMtlLib <- OBJ.uploadMtlLib asteroidMtl
+
+    asteroid <- OBJ.addOBJToObjectArray storage "objects" [] asteroidMesh gpuMtlLib
+
     -- allocate GL pipeline
     let loadRenderer = do
           LambdaCube.compileMain ["."] OpenGL33 "Asteroids.lc" >>= \case
diff --git a/lambdacube-workshop/asteroids/Asteroids.lc b/lambdacube-workshop/asteroids/Asteroids.lc
index b7b31dc..c8c4e80 100644
--- a/lambdacube-workshop/asteroids/Asteroids.lc
+++ b/lambdacube-workshop/asteroids/Asteroids.lc
@@ -1,2 +1,29 @@
+
+-- 'vertexpos':
+-- 'uvw': Texture coordinates
+vertexPositionAndTexture :: Vec 4 Float -> Vec 3 Float -> (Vec 4 Float, Vec 2 Float)
+vertexPositionAndTexture vertexpos uvw =
+    ( cameraTransform vertexpos
+    , V2 uvw%x (1 - uvw%y)
+    )
+
+cameraTransform v = perspective 0.1 100 45 1 *. lookat (V3 0 0 5) (V3 0 0 0) (V3 0 1 0) *. v
+
+makeFrame (time :: Float)
+          (color :: Vec 4 Float)
+          (texture :: Texture)
+          (prims :: PrimitiveStream Triangle (Vec 4 Float, Vec 3 Float, Vec 3 Float))
+
+    = imageFrame (emptyDepthImage 1, emptyColorImage (V4 1 1 1 1))
+  `overlay`
+      prims
+    & mapPrimitives (\(vertexpos,_n,uvw) -> vertexPositionAndTexture vertexpos uvw)
+    & rasterizePrimitives (TriangleCtx CullBack PolygonFill NoOffset LastVertex) ((Smooth))
+    & mapFragments (\((uv)) -> ((color * texture2D (Sampler PointFilter MirroredRepeat texture) uv )))
+    & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))
+
 main = renderFrame $
-   imageFrame (emptyDepthImage 1, emptyColorImage (V4 1 1 1 1) :: Image 1 ('Color (Vec 4 Float)))
+   makeFrame (Uniform "time")
+             (Uniform "diffuseColor")
+             (Texture2DSlot "diffuseTexture")
+             (fetch "objects" (Attribute "position", Attribute "normal", Attribute "uvw"))
