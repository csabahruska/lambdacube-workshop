diff --git a/lambdacube-workshop/asteroids/Asteroids.hs b/lambdacube-workshop/asteroids/Asteroids.hs
index 76e4e90..e267048 100644
--- a/lambdacube-workshop/asteroids/Asteroids.hs
+++ b/lambdacube-workshop/asteroids/Asteroids.hs
@@ -12,6 +12,11 @@ import LambdaCube.GL as LambdaCubeGL -- renderer
 import qualified LambdaCube.OBJ as OBJ
 import Logic
 
+-- for mesh construction
+import LambdaCube.GL.Mesh as LambdaCubeGL
+import qualified Data.Map as Map
+import qualified Data.Vector as V
+
 asteroidsModificationTime = getModificationTime "Asteroids.lc"
 
 main :: IO ()
@@ -25,12 +30,15 @@ main = do
             "position"  @: Attribute_V4F
             "normal"    @: Attribute_V3F
             "uvw"       @: Attribute_V3F
+          defObjectArray "debugObjects" Triangles $ do
+            "position"  @: Attribute_V3F
           defUniforms $ do
             "time"            @: Float
             "diffuseTexture"  @: FTexture2D
             "diffuseColor"    @: V4F
             "position"        @: V3F
             "angle"           @: Float
+            "radius"          @: Float
 
     storage <- LambdaCubeGL.allocStorage inputSchema
 
@@ -41,11 +49,24 @@ main = do
     (asteroidMesh,asteroidMtl) <- loadObj "data/asteroid.obj"
     (spaceshipMesh,spaceshipMtl) <- loadObj "data/spaceship.obj"
 
+    let objRadius obj = maximum [boundingSphereRadius $ meshData mesh | (mesh, _) <- obj]
+        spaceshipRadius = objRadius spaceshipMesh
+        asteroidRadius = objRadius asteroidMesh
+
+    putStrLn $ "spaceship radius: " ++ show spaceshipRadius
+    putStrLn $ "asteroid radius: " ++ show asteroidRadius
+
     -- load materials textures
     gpuMtlLib <- OBJ.uploadMtlLib $ mconcat [spaceshipMtl, asteroidMtl]
 
-    spaceshipObj <- OBJ.addOBJToObjectArray storage "objects" ["position", "angle"] spaceshipMesh gpuMtlLib
-    asteroidPool <- replicateM 1000 $ OBJ.addOBJToObjectArray storage "objects" ["position", "angle"] asteroidMesh gpuMtlLib
+    spaceshipObj <- OBJ.addOBJToObjectArray storage "objects" ["position", "angle", "radius"] spaceshipMesh gpuMtlLib
+    asteroidPool <- replicateM 1000 $ OBJ.addOBJToObjectArray storage "objects" ["position", "angle", "radius"] asteroidMesh gpuMtlLib
+
+    -- debug sphere
+    sphereMesh <- LambdaCubeGL.uploadMeshToGPU $ sphere 1 8
+    spherePool <- replicateM 1000 $ do
+      sphereObj <- LambdaCubeGL.addMeshToObjectArray storage "debugObjects" ["diffuseColor", "position", "radius", "angle"] sphereMesh
+      return [sphereObj]
 
     -- allocate GL pipeline
     let loadRenderer = do
@@ -67,12 +88,13 @@ main = do
         disableObjects :: [LambdaCubeGL.Object] -> IO ()
         disableObjects objs = mapM_ (\obj -> LambdaCubeGL.enableObject obj False) objs
 
-        addToScene :: Vec2 -> Float -> V4 Float -> [[LambdaCubeGL.Object]] -> IO [[LambdaCubeGL.Object]]
-        addToScene position angle color (objs:pool) = do
+        addToScene :: Vec2 -> Float -> Float -> V4 Float -> [[LambdaCubeGL.Object]] -> IO [[LambdaCubeGL.Object]]
+        addToScene position angle radius color (objs:pool) = do
           forM_ objs $ \obj -> do
             LambdaCubeGL.enableObject obj True
             LambdaCubeGL.updateObjectUniforms obj $ do
               "angle" @= return angle
+              "radius" @= return radius
               "diffuseColor" @= return color
               "position" @= let Vec2 x y = position in do
                 return (V3 x y 0)
@@ -92,13 +114,20 @@ main = do
                 LambdaCubeGL.updateUniforms storage $ do
                   "time" @= return t
 
+                -- collision visuals
+                spherePool1 <- case spaceship of
+                  Just spaceship -> addToScene (sPosition spaceship) (sAngle spaceship) (sRadius spaceship) (V4 1 0 0 1) spherePool
+                  _ -> return spherePool
+                spherePool2 <- foldM (\pool asteroid -> addToScene (aPosition asteroid) 0 (aRadius asteroid) (V4 0 1 0 1) pool) spherePool1 asteroids
+                disableObjects $ concat spherePool2
+
                 -- spaceship
                 case spaceship of
                   Nothing -> disableObjects spaceshipObj
-                  Just spaceship -> void $ addToScene (sPosition spaceship) (sAngle spaceship) white [spaceshipObj]
+                  Just spaceship -> void $ addToScene (sPosition spaceship) (sAngle spaceship) (sRadius spaceship / spaceshipRadius) white [spaceshipObj]
 
                 -- asteroids
-                asteroidPool1 <- foldM (\pool asteroid -> addToScene (aPosition asteroid) 0 white pool) asteroidPool asteroids
+                asteroidPool1 <- foldM (\pool asteroid -> addToScene (aPosition asteroid) 0 (aRadius asteroid / asteroidRadius) white pool) asteroidPool asteroids
                 disableObjects $ concat asteroidPool1
 
                 -- render
@@ -154,3 +183,26 @@ initWindow title width height = do
     Just win <- GLFW.createWindow width height title Nothing Nothing
     GLFW.makeContextCurrent $ Just win
     return win
+
+-- utils
+sphere :: Float -> Int -> LambdaCubeGL.Mesh
+sphere radius n = Mesh
+    { mAttributes = Map.fromList [("position", A_V3F vertices), ("normal", A_V3F normals)]
+    , mPrimitive = P_TrianglesI indices
+    }
+  where
+    m = pi / fromIntegral n
+    vertices = V.map (\(V3 x y z) -> V3 (radius * x) (radius * y) (radius * z)) normals
+    normals = V.fromList [V3 (sin a * cos b) (cos a) (sin a * sin b) | i <- [0..n], j <- [0..2 * n - 1],
+                          let a = fromIntegral i * m, let b = fromIntegral j * m]
+    indices = V.fromList $ concat [[ix i j, ix i' j, ix i' j', ix i' j', ix i j', ix i j] | i <- [0..n - 1], j <- [0..2 * n - 1],
+                                   let i' = i + 1, let j' = (j + 1) `mod` (2 * n)]
+    ix i j = fromIntegral (i * 2 * n + j)
+
+v4ToVec3 :: V4 Float -> Vec3
+v4ToVec3 (V4 x y z _) = Vec3 x y z
+
+boundingSphereRadius :: LambdaCubeGL.Mesh -> Float
+boundingSphereRadius Mesh{..} = case Map.lookup "position" mAttributes of
+  Just (A_V4F vertices) -> maximum $ fmap (len . v4ToVec3) vertices
+  _ -> 0
diff --git a/lambdacube-workshop/asteroids/Asteroids.lc b/lambdacube-workshop/asteroids/Asteroids.lc
index 916a128..2bd7749 100644
--- a/lambdacube-workshop/asteroids/Asteroids.lc
+++ b/lambdacube-workshop/asteroids/Asteroids.lc
@@ -3,25 +3,42 @@
 -- 'vertexpos':
 -- 'uvw': Texture coordinates
 -- 'angle':
-vertexPositionAndTexture :: Vec 3 Float -> Vec 4 Float -> Vec 3 Float -> Float -> (Vec 4 Float, Vec 2 Float)
-vertexPositionAndTexture pos vertexpos uvw angle =
-    ( cameraTransform $ V4 pos%x pos%y pos%z 1 + rotMatrixZ angle *. vertexpos
+vertexPositionAndTexture :: Vec 3 Float -> Vec 4 Float -> Vec 3 Float -> Float -> Float -> (Vec 4 Float, Vec 2 Float)
+vertexPositionAndTexture pos vertexpos uvw angle radius =
+    ( cameraTransform $ V4 pos%x pos%y pos%z 1 + rotMatrixZ angle *. scaledVertexPos
     , V2 uvw%x (1 - uvw%y)
     )
+  where
+    v = vertexpos *! radius
+    scaledVertexPos = V4 v%x v%y 0 1
 
 cameraTransform v = perspective 0.1 100 45 1 *. lookat (V3 0 0 5) (V3 0 0 0) (V3 0 1 0) *. v
 
+dbgPosistion :: Vec 3 Float -> Vec 3 Float -> Float -> Float -> Vec 4 Float
+dbgPosistion pos vertexpos angle radius =
+  cameraTransform $ V4 pos%x pos%y pos%z 1 + rotMatrixZ angle *. V4 scaledVertexPos%x scaledVertexPos%y scaledVertexPos%z 1
+  where
+    scaledVertexPos = vertexpos *! radius
+
 makeFrame (time :: Float)
           (color :: Vec 4 Float)
           (angle :: Float)
           (position :: Vec 3 Float)
           (texture :: Texture)
           (prims :: PrimitiveStream Triangle (Vec 4 Float, Vec 3 Float, Vec 3 Float))
+          (radius :: Float)
+          (debugPrims :: PrimitiveStream Triangle ((Vec 3 Float)) )
 
     = imageFrame (emptyDepthImage 1, emptyColorImage (V4 1 1 1 1))
   `overlay`
+      debugPrims
+    & mapPrimitives (\((p)) -> ((dbgPosistion position p angle radius)))
+    & rasterizePrimitives (TriangleCtx CullBack (PolygonLine 1) NoOffset LastVertex) ()
+    & mapFragments (\_ -> ((color)))
+    & accumulateWith (DepthOp Less False, ColorOp NoBlending (V4 True True True True))
+  `overlay`
       prims
-    & mapPrimitives (\(vertexpos,_n,uvw) -> vertexPositionAndTexture position vertexpos uvw angle)
+    & mapPrimitives (\(vertexpos,_n,uvw) -> vertexPositionAndTexture position vertexpos uvw angle radius)
     & rasterizePrimitives (TriangleCtx CullBack PolygonFill NoOffset LastVertex) ((Smooth))
     & mapFragments (\((uv)) -> ((color * texture2D (Sampler PointFilter MirroredRepeat texture) uv )))
     & accumulateWith (DepthOp Less True, ColorOp NoBlending (V4 True True True True))
@@ -33,3 +50,5 @@ main = renderFrame $
              (Uniform "position")
              (Texture2DSlot "diffuseTexture")
              (fetch "objects" (Attribute "position", Attribute "normal", Attribute "uvw"))
+             (Uniform "radius")
+             (fetch "debugObjects" ((Attribute "position")) )
diff --git a/lambdacube-workshop/asteroids/Logic.hs b/lambdacube-workshop/asteroids/Logic.hs
index e656c00..4dfd057 100644
--- a/lambdacube-workshop/asteroids/Logic.hs
+++ b/lambdacube-workshop/asteroids/Logic.hs
@@ -186,4 +186,4 @@ collideWorld World{..} = do
     bullets' = filter (not . collideAsteroidsBullet asteroids) bullets
 
 stepGame :: MonadRandom m => Float -> UserInput -> World -> m World
-stepGame deltaTime userInput = {-collideWorld-} pure . stepWorld deltaTime userInput
+stepGame deltaTime userInput = collideWorld . stepWorld deltaTime userInput
